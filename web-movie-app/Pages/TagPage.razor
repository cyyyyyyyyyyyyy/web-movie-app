@page "/tag/{tagId:int}"

@using web_movie_app.Data
@inject AppService appservice
@inject NavigationManager UriHelper

<h1>web-movie-app</h1>
<p>
	Enter movie name/person name/tag name:
	<br />
	<br />
	<input @bind="@appservice.searchString" type="text" placeholder="..." />
	<input @onclick="(() => {UriHelper.NavigateTo(surl + appservice.searchString, true);})" type="button" value="search" />
</p>

@if ((currTag != null)&&(IsPageOneLoaded))
{
	<table class="table">
		<tbody style="border: thin">
			<tr>
				<th width="20%">
					<img src="sonic.png" width="200" />
				</th>
				<th>
					<h3>
						@currTag.name
					</h3>
					<p>lens id: @currTag.tagId</p>
				</th>
			</tr>
		</tbody>
	</table>
	<table class="table">
		<thead>
			<tr>
				<th width="100%">
					<h3>@currTag.movies.Count movies:</h3>
				</th>
				<th>
					<input @onclick="@(() => {page++; GetNextPage();})" type="button" value="Load more..." />
				</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<th>
					<table class="table">
						<tbody>
							@foreach (var m in currTag.movies.Take((page + 1) * 20))
							{
								<tr>
									<th style="width: 8%">
										<img src="@moviesData[m.imdbId].imageurl" width="100" onerror="this.error=null; this.src='sonic.png';" />
									</th>
									<th>
										<a href="@(murl + m.imdbId)">
											@m.titles.First().title
										</a>
										<small>imdb id: @m.imdbId</small>
										<br>
										<br />
										<small>Rating: @m.rating</small>
										<br>
										<br />
										<p style="overflow: hidden; max-width: 110ch; text-overflow: ellipsis; white-space: nowrap;">@moviesData[m.imdbId].plot</p>
									</th>
								</tr>
							}
						</tbody>
					</table>
				</th>
			</tr>
		</tbody>
	</table>
}
else
{
	<p><em>Loading...</em></p>
}

@code {
	[Parameter]
	public int? tagId { get; set; }
	private string surl = "/search/";
	private string murl = "/movie/";

	public Tag? currTag { get; set; }
	public Dictionary<string, MovieData> moviesData { get; set; } = new();
	//[Parameter]
	public int page { get; set; }
	[Parameter]
	public bool IsPageOneLoaded { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (tagId != null)
		{
			Tag? currTagTemp = null;
			foreach (Tag t in appservice.tagList)
			{
				if (t.tagId == tagId)
				{
					currTagTemp = t;
					break;
				}
			}

			if (currTagTemp == null)
			{
				currTagTemp = appservice.qb.TagByIdQuery(tagId.Value);
				if (currTagTemp == null)
					return;
			}

			/*var t2 = await Task.Run(() => appservice.GetMovieAndPersonData(currTagTemp.movies, new List<Person>()));
			moviesData = t2.Item1;*/
			page = 0;
			IsPageOneLoaded = false;
			currTag = currTagTemp;
			await Task.Run(() => GetNextPage());			
		}
	}
	public void GetNextPage() // page = 0 - first page
	{
		if (currTag != null)
		{
			var t2 = Task.Run(() => appservice.GetMovieAndPersonData(currTag.movies.Skip(20 * page).Take(20).ToList(), new List<Person>()));
			t2.Wait();
			Dictionary<string, MovieData>? currPageMoviesData = t2.Result.Item1;
			if (currPageMoviesData == null)
				return;

			foreach (var id in currPageMoviesData.Keys)
			{
				moviesData.Add(id, currPageMoviesData[id]);
			}
			IsPageOneLoaded = true;
		}
	}
}
