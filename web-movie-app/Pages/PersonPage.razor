@page "/person/{personId}"

@using web_movie_app.Data
@inject AppService appservice
@inject NavigationManager UriHelper

<h1>web-movie-app</h1>
<p>
	Enter movie name/person name/tag name:
	<br />
	<br />
	<input @bind="@appservice.searchString" type="text" placeholder="..." />
	<input @onclick="(() => {currPerson = null; UriHelper.NavigateTo(surl + appservice.searchString, true);})" type="button" value="search" />
</p>

@if ((currPerson != null)&&(IsPageOneLoaded))
{
	<table class="table">
		<tbody style="border: thin">
			<tr>
				<th width="20%">
					<img src="@currPersonData" width="200"/>
				</th>
				<th>
					<h3>
						@currPerson.name
					</h3>
					<p>imdb id: @currPerson.personId</p>
				</th>
			</tr>
		</tbody>
	</table>
	<table class="table">
		<thead>
			<tr>
				<th width="100%">
					<h3>@currCategories.Count movies:</h3>
				</th>
				<th>
					<input @onclick="(() => {page++; GetNextPage();})" type="button" value="Load more..." />
				</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<th>
					<table class="table">
						<tbody>
							@foreach (var c in currCategories.Take((page + 1) * 20))
							{
								<tr>
									<th width="8%">
										<img src="@moviesData[c.movie.imdbId].imageurl" width="100" onerror="this.error = null; this.src = 'aeroplane.jpg';" />
									</th>
									<th>
										<a href="@(murl + c.movie.imdbId)">
											@c.movie.titles.First().title
										</a>
										<small>imdb id: @c.movie.imdbId</small>
										<br>
										<br />
										<small>@c.category</small>
										<br>
										<br />
										<small>Rating: @c.movie.rating</small>
										<br>
										<br />
										<p style="overflow: hidden; max-width: 110ch; text-overflow: ellipsis; white-space: nowrap;">@moviesData[c.movie.imdbId].plot</p>
									</th>
								</tr>
							}
						</tbody>
					</table>
				</th>
			</tr>
		</tbody>
	</table>
}
else
{
	<p><em>Loading...</em></p>
}

@code {
	[Parameter]
	public string? personId { get; set; }
	private string surl = "/search/";
	private string murl = "/movie/";

	public Person? currPerson { get; set; }
	public List<Category> currCategories { get; set; } = new();
	public string currPersonData { get; set; } = "";

	public Dictionary<string, MovieData> moviesData { get; set; } = new();

	public int page { get; set; }
	[Parameter]
	public bool IsPageOneLoaded { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (personId != null)
		{
			Person? currPersonTemp = null;
			foreach (Person p in appservice.personDictionary.Keys)
			{
				if (p.personId == personId)
				{
					currPersonTemp = p;
					currCategories = appservice.personDictionary[p];
					currPersonData = appservice.personData[p.personId];

					break;
				}
			}

			if (currPersonTemp == null)
			{
				var t1 = appservice.qb.PersonByIdQuery(personId);
				currPersonTemp = t1.Item1;
				if (currPersonTemp == null)
					return;
				currCategories = t1.Item2;

				var t2 = await Task.Run(() => appservice.GetMovieAndPersonData(new List<Movie>(), new List<Person> { currPersonTemp }));
				currPersonData = t2.Item2.First().Value;
			}

			/*var t = await Task.Run(() => appservice.GetMovieAndPersonData(currCategories.Select(c => c.movie).ToList(), new List<Person>()));
			moviesData = t.Item1;*/
			page = 0;
			IsPageOneLoaded = false;
			currPerson = currPersonTemp;
			await Task.Run(() => GetNextPage());
		}
	}

	public void GetNextPage() // page = 0 - first page
	{
		if (currPerson != null) // maybe currCategories.Count != 0?
		{
			var t2 = Task.Run(() => appservice.GetMovieAndPersonData(currCategories.Select(c => c.movie).Skip(20 * page).Take(20).ToList(), new List<Person>()));
			t2.Wait();
			Dictionary<string, MovieData>? currPageMoviesData = t2.Result.Item1;
			if (currPageMoviesData == null)
				return;

			foreach (var id in currPageMoviesData.Keys)
			{
				moviesData.Add(id, currPageMoviesData[id]);
			}
			IsPageOneLoaded = true;
		}
	}
}
